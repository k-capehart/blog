[{"content":"","date":null,"permalink":"/categories/apex/","section":"Categories","summary":"","title":"Apex"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/categories/flows/","section":"Categories","summary":"","title":"Flows"},{"content":"","date":null,"permalink":"/","section":"Kyle Capehart","summary":"","title":"Kyle Capehart"},{"content":"","date":null,"permalink":"/categories/salesforce/","section":"Categories","summary":"","title":"Salesforce"},{"content":"Programmatic vs declarative solutions, and why Apex always wins.\nApex vs Flows #We\u0026rsquo;ve all heard the pitch. Flows are the declarative solution to automation in Salesforce. Flows are getting better with every release. Flows offer a low barrier to entry. Flows are so simple a child could make them. Flows saved my family and solved world hunger.\nIn most trainings, Flows are recommended as the go-to solution, with Apex as a secondary option if the logic becomes too complex. Salesforce even recently unveiled their new character, Flo the Flying Squirrel, as a way of demonstrating their commitment to declarative tools.\nHowever, declarative automations are not a good pattern to design a system with. If given the option, an Engineer should always choose code.\nThere are use cases for Flows. If there isn’t a developer on hand, or there is a large legacy system, then code might not be an option. That being said, any software solution needs to be able to scale. For a company hoping to provide the smoothest transition, Salesforce solutions need to be designed by engineers from the start. Otherwise, it\u0026rsquo;s set up for failure.\nThe Case for Apex #When it comes down to it, engineers need to be allowed to engineer. This means using the best tools on hand, and Apex provides that. Let’s break down the reasoning.\nHandling Complex Logic #A small sales organization will not need much customization in Salesforce right away. Simple problems are easily solved by point-and-click tools. However, as time goes on and the organization grows, complexity compounds. Suddenly Salesforce needs to communicate with numerous external systems, process large batches of records, and perform complex SOQL queries, all of which Flows struggle to deliver.\nFlows are often touted as easier to build, which is certainly true if you’re not a developer, but otherwise not necessarily. Valuable time can be wasted during a sprint trying to get a flow to handle a complex operation (such as processing many child records), only to eventually be abandoned and have the processing handled in an invocable Apex action. This extra development time can be avoided if the solution is designed in Apex from the beginning.\nMaintenance #If complex processes are built out in flows, then it quickly becomes difficult to maintain. Over time, flows might end up looking like this, which become a nightmare to debug:\nAs mentioned before, it might become necessary to move complex functionality from flows into apex triggers. If so, automations are now handled in two different places and the order of execution needs to be considered to ensure expected outcomes still hold. With an absence of clear documentation, it can be cumbersome to figure out where certain business logic resides.\nIt’s also very tedious to move elements from one flow to another in the event anything needs to be reorganized. With Apex, code can easily be designed to be reusable without significant development overhead.\nTracking Changes #Version control is essential for any engineering team, Salesforce teams included. Flows have a versioning system, but it’s far from enough. Luckily, flow metadata can be checked into a git repository and tracked from there.\nWhat’s the problem then?\nThe metadata is in xml, and not human readable. The only viable way to perform a code review on a Flow is to open it in a sandbox and view it in the UI. This isn’t feasible if it was developed in a scratch org, meaning the reviewer will have to do their best to read the xml or deploy it to their own scratch org.\nThe problem is even worse if non-Salesforce developers are reviewing the change. A Java developer should be able to trace through Apex without much issue but stick a Flow in front of them and it will be harder to parse.\nWriting Tests #Flows offer almost the same power as Apex but with a simpler learning curve, which is usually considered a positive. There’s a huge problem with this reasoning though. Apex code requires a minimum threshold of code coverage before deploying to production. Flows by default, do not.\nIf a tool can make external callouts to systems, reassign records, expose data, or any other number of high impact operations, there needs to be a certain level of security. Not to mention the reliability of a system that doesn\u0026rsquo;t have a set of standardized tests in place. Declarative flow tests have recently been released, but they don’t replace the full functionalities of Apex test classes. Most importantly, they\u0026rsquo;re missing the ability to automatically run during a deployment.\nThere is a way to enforce flow test coverage from Apex tests, which is highly recommended if an organization has any flows. However, the fact that it’s not enabled by default is a big concern. A developer should be writing unit tests as soon as possible in the development process, so there’s no reason not to write the business logic in Apex as well. Salesforce themselves recommend a test-driven development process, which is only feasible with Apex tests.\nConclusion #Flows have their place in the Salesforce ecosystem, but when it comes to picking the right tool for the job, Apex comes out on top almost every time. Invest in developers early on and Salesforce is less likely to become bloated with poorly optimized automations. Software engineering teams should be encouraged to embrace code rather than avoid it.\nIf you have any comments or want to reach out, send me a message through one of my socials.\n","date":"12 March 2024","permalink":"/posts/apex-over-flows/","section":"Posts","summary":"Programmatic vs declarative solutions, and why Apex always wins.","title":"Why you should always use Apex instead of Flows in Salesforce"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"I\u0026rsquo;m a Software Engineer based in Orlando, Florida who specializes in Salesforce implementations. I have four certifications including Platform Developer II. I earned my Computer Science degree at the University of Central Florida. I love to learn, and am trying to improve my skills in Python, Go, and Angular.\nAt my current role, I serve as the Lead Engineer for the Salesforce implementation at American Tire Distributors and work on various systems related to customer interaction. It has always been my goal to apply software engineering best practices to the Salesforce platform. Previously, I worked as a Consultant / Developer for the Federal Government while at Deloitte, giving me a wide breadth of experience in a client facing role.\nBeyond work, I usually have a book in hand, and read lots of science-fiction and fantasy. I also love to run and can be found participating in local 5Ks. Ask me about my cat Brisket.\n","date":"11 March 2024","permalink":"/about/","section":"Kyle Capehart","summary":"I\u0026rsquo;m a Software Engineer based in Orlando, Florida who specializes in Salesforce implementations.","title":"About Me"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]